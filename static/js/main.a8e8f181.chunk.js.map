{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","svgWidth","setSVGWidth","svgHeight","setSVGHeight","xPos","setXPos","yPos","setYPos","sameColor","setSameColor","svgRef","useCallback","node","getBoundingClientRect","height","width","className","onMouseMove","e","nativeEvent","offsetX","offsetY","onClick","ref","xmlns","viewBox","id","in","stdDeviation","type","tableValues","filter","x","y","fill","cx","cy","r","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAoFeA,MA/Ef,WAOE,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwBJ,mBAAS,KAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAwBN,mBAAS,KAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEMC,EAASC,uBAAY,SAAAC,GACZ,OAATA,IACFT,EAAaS,EAAKC,wBAAwBC,QAC1Cb,EAAYW,EAAKC,wBAAwBE,UAE1C,IAiBH,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,QACbC,YAba,SAACC,GAClBb,EAAS,IAAIL,EAAWkB,EAAEC,YAAYC,SACtCb,EAAS,IAAIL,EAAYgB,EAAEC,YAAYE,UAYnCC,QATe,SAACJ,GACpBT,GAAcD,IASVe,IAAKb,EACLc,MAAM,6BACNC,QAAO,cALT,UAOE,iCACE,wBAAQC,GAAG,OAAX,SACE,gCAAgBC,GAAG,gBAAgBC,aAAa,SAElD,wBAAQF,GAAG,cAAX,SACE,gDACE,yBAASG,KAAK,aACd,yBAASA,KAAK,aACd,yBAASA,KAAK,aACd,yBAASA,KAAK,WAAWC,YAAY,gBAI3C,8BACE,mBAAGC,OAAO,oBAAV,SACE,oBAAGA,OAAO,aAAV,UACE,sBAAMC,EAAE,IAAIC,EAAE,IAAIlB,MAAM,OAAOD,OAAO,OAAOoB,KAAK,UAElD,wBAAQC,GAAI/B,EAAMgC,GAAI9B,EAAM+B,EAAE,KAAKH,KAAM1B,EAAY,UAAY,YAEjE,wBAAQ2B,GAAG,MAAMC,GAAG,MAAMC,EAAE,KAAKH,KAAK,YACtC,wBAAQC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAMH,KAAK,YACvC,sBAAMF,EAAE,MAAMC,EAAE,MAAMlB,MAAM,MAAMD,OAAO,MAAMoB,KAAK,iBAIxD,sBAAMF,EAAE,KAAKC,EAAE,KAAKK,WAAW,OAA/B,mCACA,sBAAMN,EAAE,MAAMC,EAAE,KAAKK,WAAW,SAAhC,oDChEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a8e8f181.chunk.js","sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nimport './App.css';\n\n\nfunction App() {\n\n  /* IMPORTANT: \n    Until solutions for window/element resize, applications of this\n    effect should be limited to fixed width/height objects\n  */\n\n  const [svgWidth, setSVGWidth] = useState(0);\n  const [svgHeight, setSVGHeight] = useState(0);\n  const [xPos, setXPos] = useState(300);\n  const [yPos, setYPos] = useState(230);\n  const [sameColor, setSameColor] = useState(true);\n\n  const svgRef = useCallback(node => {\n    if (node !== null) {\n      setSVGHeight(node.getBoundingClientRect().height);\n      setSVGWidth(node.getBoundingClientRect().width);\n    }\n  }, []);\n\n  /*useEffect(() => {\n    setSVGWidth(svgRef.current.offsetWidth);\n    setSVGHeight(svgRef.current.offsetHeight);\n  }, [svgRef]);*/\n\n  const mouseMoved = (e) => {\n    setXPos((600/svgWidth)*(e.nativeEvent.offsetX));\n    setYPos((600/svgHeight)*(e.nativeEvent.offsetY));\n  }\n\n  const mouseClicked = (e) => {\n    setSameColor(!sameColor);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <svg className=\"goopy\"\n        onMouseMove={mouseMoved}\n        onClick={mouseClicked}\n        ref={svgRef}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 600 600`}\n      >\n        <defs>\n          <filter id=\"blur\">\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"20\" />\n          </filter>\n          <filter id=\"flattenBlur\">\n            <feComponentTransfer>\n              <feFuncR type=\"identity\"></feFuncR>\n              <feFuncG type=\"identity\"></feFuncG>\n              <feFuncB type=\"identity\"></feFuncB>\n              <feFuncA type=\"discrete\" tableValues=\"0 1\"></feFuncA>\n            </feComponentTransfer>\n          </filter>\n        </defs>\n        <g>\n          <g filter=\"url(#flattenBlur)\">\n            <g filter=\"url(#blur)\">\n              <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"#fff0\" />\n    \n              <circle cx={xPos} cy={yPos} r=\"75\" fill={sameColor ? \"#2a9d8f\" : \"#67b99a\"} />\n\n              <circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"#2a9d8f\" />\n              <circle cx=\"150\" cy=\"300\" r=\"100\" fill=\"#2a9d8f\" />\n              <rect x=\"-50\" y=\"400\" width=\"700\" height=\"250\" fill=\"#2a9d8f\" />\n\n            </g>\n          </g>\n          <text x=\"10\" y=\"20\" fontWeight=\"bold\">Absorbing Shapes Demo</text>\n          <text x=\"400\" y=\"20\" fontWeight=\"normal\">Click to change circle color.</text>\n          {/*<rect x=\"0\" y=\"400\" width=\"100%\" height=\"200\" fill=\"#2a9d8f\" />*/}\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}